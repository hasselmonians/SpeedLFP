function res = anovas_filtered(vehicle, drug)

    % dat(1).crunched.cell.FIELD    
    
    %% Single fields
    flds = {
        'svfr_R2', ...
        'svfr_slope', ...
        'svfr_inter', ...
        'poi_sfr_R2', ...
        'poi_sfr_inter', ...
        'poi_sfr_slope', ...
        'rhythmicity_base_tau', ...
        'rhythmicity_base_b', ...
        'rhythmicity_base_c', ...
        'rhythmicity_base_f', ...
        'rhythmicity_base_s', ...
        'rhythmicity_base_r', ...
        'rhythmicity_skip', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency_intercept', ...
        'rhythmicity_frequency_slope', ...
        'rhythmicity_amplitude0', ...
        'rhythmicity_amplitude_intercept', ...
        'rhythmicity_amplitude_slope',...
        'theta_mrl',...
        'theta_mra',...
        };

    filters = {
        'svfr_p', ...
        'svfr_p', ...
        'svfr_p', ...
        'poi_sfr_p', ...
        'poi_sfr_p', ...
        'poi_sfr_p', ...
        'rhythmicity_p_rhythmic', ...
        'rhythmicity_p_rhythmic', ...
        'rhythmicity_p_rhythmic', ...
        'rhythmicity_p_rhythmic', ...
        'rhythmicity_p_rhythmic', ...
        'rhythmicity_p_rhythmic', ...
        'rhythmicity_p_skip', ...
        'rhythmicity_p_freq', ...
        'rhythmicity_p_freq', ...
        'rhythmicity_p_freq', ...
        'rhythmicity_p_amp', ...
        'rhythmicity_p_amp', ...
        'rhythmicity_p_amp', ...
        'theta_pr',...
        'theta_pr',...
        };
    
    filters2 = {
        [], ...
        []', ...
        [], ...
        [], ...
        [], ...
        [], ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ....
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        'rhythmicity_frequency0', ...
        [],...
        [],...
        };
    
    thresh = 0.05;
    thresh2 = [6 10];
    
    for k = 1:length(flds)
        
        % Get the data out
        v = ['x_v = arrayfun(@(x) x.' flds{k} ', vehicle.crunched.cell, ''UniformOutput'', 0);'];
        d = ['x_d = arrayfun(@(x) x.' flds{k} ', drug.crunched.cell, ''UniformOutput'', 0);'];
        fv = ['fv= arrayfun(@(x) x.' filters{k} ',vehicle.crunched.cell, ''UniformOutput'',0);'];
        fd = ['fd= arrayfun(@(x) x.' filters{k} ',drug.crunched.cell, ''UniformOutput'',0);'];
        
        eval(v); eval(d);
        eval(fv); eval(fd);
        
        if ~isempty(filters2{k})
            tf_v=['tf_v=arrayfun(@(x) x.' filters2{k} '>=thresh2(1) & x.' filters2{k} '<=thresh2(2), vehicle.crunched.cell,''UniformOutput'',0);'];
            eval(tf_v);
            
            tf_d=['tf_d=arrayfun(@(x) x.' filters2{k} '>=thresh2(1) & x.' filters2{k} '<=thresh2(2), drug.crunched.cell,''UniformOutput'',0);'];
            eval(tf_d);
        else
            tf_v = cellfun(@(x) ones(size(x)), x_v,'UniformOutput',0);
            tf_d = cellfun(@(x) ones(size(x)), x_d,'UniformOutput',0);
        end
        
        
        
        for ctp = 1:8 % For each cell grouping
            for bl = 1:4
                for xp = 1:4
                    
                    vbl = x_v{ctp,bl}; vbl=vbl(:); vbl(~(fv{ctp}<thresh))=NaN; vbl(~tf_v{ctp,bl})=NaN;
                    vxp = x_v{ctp,xp}; vxp=vxp(:); vxp(~(fv{ctp}<thresh))=NaN; vxp(~tf_v{ctp,xp})=NaN;
                    dbl = x_d{ctp,bl}; dbl=dbl(:); dbl(~(fd{ctp}<thresh))=NaN; dbl(~tf_d{ctp,bl})=NaN;
                    dxp = x_d{ctp,xp}; dxp=dxp(:); dxp(~(fd{ctp}<thresh))=NaN; dxp(~tf_d{ctp,xp})=NaN;
                
                    t=clean(vbl, vxp);vbl=t(:,1); vxp=t(:,2);
                    t=clean(dbl, dxp);dbl=t(:,1); dxp=t(:,2);
                    
                    %if ~isempty(t)
                    %    keyboard
                    %end
  
                    try %~(isempty(vbl) + isempty(vxp) + isempty(dbl) + isempty(dxp))
                        % compare
                        [p, table] = anova_rm({[vbl vxp], [dbl dxp]},0);
                        
                        if isnan(table{5,6})
                            %keyboard
                        end
                        
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p1(bl,xp) = p(1);']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p2(bl,xp) = p(2);']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p3(bl,xp) = p(3);']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p4(bl,xp) = p(4);']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.table{bl,xp} = table;'])
                        
                        % drug
                        p1 = '[~, ';
                        p2 = ['drg.' flds{k} '.' mapping(ctp) '.p(bl,xp),'];
                        p3 = ['drg.' flds{k} '.' mapping(ctp) '.est{bl,xp},'];
                        p4 = 'temp] = ttest(dbl,dxp);';
                        eval([p1 p2 p3 p4])

                        flds2 = fieldnames(temp);
                        for m = 1:length(flds2)
                            p1 = ['drg.' flds{k} '.' mapping(ctp) '.stats_' flds2{m} '(bl,xp)='];
                            p2 = ['temp.' flds2{m} ';'];
                            eval([p1 p2])
                        end
                        
                        if bl~=xp && isnan(drg.(flds{k}).(mapping(ctp)).p(bl,xp)) && k>=7
                            %keyboard
                        end

                        % veh
                        p1 = '[~, ';
                        p2 = ['veh.' flds{k} '.' mapping(ctp) '.p(bl,xp),'];
                        p3 = ['veh.' flds{k} '.' mapping(ctp) '.est{bl,xp},'];
                        p4 = 'temp] = ttest(vbl,vxp);';
                        eval([p1 p2 p3 p4])

                        flds2 = fieldnames(temp);
                        for m = 1:length(flds2)
                            p1 = ['veh.' flds{k} '.' mapping(ctp) '.stats_' flds2{m} '(bl,xp)='];
                            p2 = ['temp.' flds2{m} ';'];
                            eval([p1 p2])
                        end
                    catch
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p1(bl,xp) = NaN;']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p2(bl,xp) = NaN;']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p3(bl,xp) = NaN;']);
                        eval(['cmp.' flds{k} '.' mapping(ctp) '.p4(bl,xp) = NaN;']);
                        
                        eval(['drg.' flds{k} '.' mapping(ctp) '.p(bl,xp)=NaN;']);
                        eval(['drg.' flds{k} '.' mapping(ctp) '.est{bl,xp}=NaN;']);

                        %flds2 = fieldnames(temp);
                        %for m = 1:length(flds2)
                        %    p1 = ['drg.' flds{k} '.' mapping(ctp) '.stats_' flds2{m} '(bl,xp)='];
                        %    p2 = ['NaN;'];
                        %    eval([p1 p2])
                        %end

                        % veh
                        eval(['veh.' flds{k} '.' mapping(ctp) '.p(bl,xp)=NaN;']);
                        eval(['veh.' flds{k} '.' mapping(ctp) '.est{bl,xp}=NaN;']);
                    end
                    
                end
            end
        end  
    end
    
    res.drug = drg;
    res.vehi = veh;
    res.cmp = cmp;

end